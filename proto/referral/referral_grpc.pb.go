// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: referral/referral.proto

package referral

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReferralService_GetPrograms_FullMethodName   = "/referral.referral_service/GetPrograms"
	ReferralService_GetProgram_FullMethodName    = "/referral.referral_service/GetProgram"
	ReferralService_AddProgram_FullMethodName    = "/referral.referral_service/AddProgram"
	ReferralService_UpdateProgram_FullMethodName = "/referral.referral_service/UpdateProgram"
	ReferralService_GetMembers_FullMethodName    = "/referral.referral_service/GetMembers"
	ReferralService_AddMember_FullMethodName     = "/referral.referral_service/AddMember"
	ReferralService_GetReferrals_FullMethodName  = "/referral.referral_service/GetReferrals"
	ReferralService_AddReferral_FullMethodName   = "/referral.referral_service/AddReferral"
)

// ReferralServiceClient is the client API for ReferralService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReferralServiceClient interface {
	// Referral Program apis
	GetPrograms(ctx context.Context, in *GetProgramsRequest, opts ...grpc.CallOption) (*GetProgramsResponse, error)
	GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*GetProgramResponse, error)
	AddProgram(ctx context.Context, in *AddProgramRequest, opts ...grpc.CallOption) (*AddProgramResponse, error)
	UpdateProgram(ctx context.Context, in *UpdateProgramRequest, opts ...grpc.CallOption) (*UpdagteProgramResponse, error)
	// Program Membership apis
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error)
	// Member referrals apis
	GetReferrals(ctx context.Context, in *GetReferralsRequest, opts ...grpc.CallOption) (*GetReferralsResponse, error)
	AddReferral(ctx context.Context, in *AddReferralRequest, opts ...grpc.CallOption) (*AddReferralResponse, error)
}

type referralServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferralServiceClient(cc grpc.ClientConnInterface) ReferralServiceClient {
	return &referralServiceClient{cc}
}

func (c *referralServiceClient) GetPrograms(ctx context.Context, in *GetProgramsRequest, opts ...grpc.CallOption) (*GetProgramsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProgramsResponse)
	err := c.cc.Invoke(ctx, ReferralService_GetPrograms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*GetProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProgramResponse)
	err := c.cc.Invoke(ctx, ReferralService_GetProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) AddProgram(ctx context.Context, in *AddProgramRequest, opts ...grpc.CallOption) (*AddProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProgramResponse)
	err := c.cc.Invoke(ctx, ReferralService_AddProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) UpdateProgram(ctx context.Context, in *UpdateProgramRequest, opts ...grpc.CallOption) (*UpdagteProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdagteProgramResponse)
	err := c.cc.Invoke(ctx, ReferralService_UpdateProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMembersResponse)
	err := c.cc.Invoke(ctx, ReferralService_GetMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMemberResponse)
	err := c.cc.Invoke(ctx, ReferralService_AddMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) GetReferrals(ctx context.Context, in *GetReferralsRequest, opts ...grpc.CallOption) (*GetReferralsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReferralsResponse)
	err := c.cc.Invoke(ctx, ReferralService_GetReferrals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) AddReferral(ctx context.Context, in *AddReferralRequest, opts ...grpc.CallOption) (*AddReferralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReferralResponse)
	err := c.cc.Invoke(ctx, ReferralService_AddReferral_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferralServiceServer is the server API for ReferralService service.
// All implementations must embed UnimplementedReferralServiceServer
// for forward compatibility.
type ReferralServiceServer interface {
	// Referral Program apis
	GetPrograms(context.Context, *GetProgramsRequest) (*GetProgramsResponse, error)
	GetProgram(context.Context, *GetProgramRequest) (*GetProgramResponse, error)
	AddProgram(context.Context, *AddProgramRequest) (*AddProgramResponse, error)
	UpdateProgram(context.Context, *UpdateProgramRequest) (*UpdagteProgramResponse, error)
	// Program Membership apis
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error)
	// Member referrals apis
	GetReferrals(context.Context, *GetReferralsRequest) (*GetReferralsResponse, error)
	AddReferral(context.Context, *AddReferralRequest) (*AddReferralResponse, error)
	mustEmbedUnimplementedReferralServiceServer()
}

// UnimplementedReferralServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReferralServiceServer struct{}

func (UnimplementedReferralServiceServer) GetPrograms(context.Context, *GetProgramsRequest) (*GetProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrograms not implemented")
}
func (UnimplementedReferralServiceServer) GetProgram(context.Context, *GetProgramRequest) (*GetProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgram not implemented")
}
func (UnimplementedReferralServiceServer) AddProgram(context.Context, *AddProgramRequest) (*AddProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProgram not implemented")
}
func (UnimplementedReferralServiceServer) UpdateProgram(context.Context, *UpdateProgramRequest) (*UpdagteProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgram not implemented")
}
func (UnimplementedReferralServiceServer) GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedReferralServiceServer) AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedReferralServiceServer) GetReferrals(context.Context, *GetReferralsRequest) (*GetReferralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferrals not implemented")
}
func (UnimplementedReferralServiceServer) AddReferral(context.Context, *AddReferralRequest) (*AddReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReferral not implemented")
}
func (UnimplementedReferralServiceServer) mustEmbedUnimplementedReferralServiceServer() {}
func (UnimplementedReferralServiceServer) testEmbeddedByValue()                         {}

// UnsafeReferralServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferralServiceServer will
// result in compilation errors.
type UnsafeReferralServiceServer interface {
	mustEmbedUnimplementedReferralServiceServer()
}

func RegisterReferralServiceServer(s grpc.ServiceRegistrar, srv ReferralServiceServer) {
	// If the following call pancis, it indicates UnimplementedReferralServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReferralService_ServiceDesc, srv)
}

func _ReferralService_GetPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).GetPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_GetPrograms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).GetPrograms(ctx, req.(*GetProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_GetProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).GetProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_GetProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).GetProgram(ctx, req.(*GetProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_AddProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).AddProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_AddProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).AddProgram(ctx, req.(*AddProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_UpdateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).UpdateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_UpdateProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).UpdateProgram(ctx, req.(*UpdateProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_GetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).AddMember(ctx, req.(*AddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_GetReferrals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).GetReferrals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_GetReferrals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).GetReferrals(ctx, req.(*GetReferralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_AddReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReferralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).AddReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_AddReferral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).AddReferral(ctx, req.(*AddReferralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReferralService_ServiceDesc is the grpc.ServiceDesc for ReferralService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReferralService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "referral.referral_service",
	HandlerType: (*ReferralServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrograms",
			Handler:    _ReferralService_GetPrograms_Handler,
		},
		{
			MethodName: "GetProgram",
			Handler:    _ReferralService_GetProgram_Handler,
		},
		{
			MethodName: "AddProgram",
			Handler:    _ReferralService_AddProgram_Handler,
		},
		{
			MethodName: "UpdateProgram",
			Handler:    _ReferralService_UpdateProgram_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _ReferralService_GetMembers_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _ReferralService_AddMember_Handler,
		},
		{
			MethodName: "GetReferrals",
			Handler:    _ReferralService_GetReferrals_Handler,
		},
		{
			MethodName: "AddReferral",
			Handler:    _ReferralService_AddReferral_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "referral/referral.proto",
}
